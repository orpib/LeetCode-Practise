class TrieNode {
    private:
    TrieNode *links[26];
    bool isEnd ;
    
    public:
    TrieNode(){
        isEnd = false;
        for (int i = 0; i < 26; i++)
            links[i] = NULL;
    }
    
    bool containsKey(char ch) {
        return links[ch -'a'] != NULL;
    }
    TrieNode* get(char ch){
        return links[ch-'a'];
    }
    
    void put(char ch , TrieNode* node){
        links[ch-'a'] =  node;
    }
    void setEnd(){
        isEnd = true;
    }
    
    bool isEnded(){
        return isEnd;
    }
    
};



class Trie {
    TrieNode *root;
private :
    TrieNode* searchPrefix(string word){
        TrieNode *node = root;
        
        for(int i=0;i<word.length();i++){
            char ch = word[i];
            if(!node->containsKey(ch)) return NULL;
            
            node = node->get(ch);
        }
        return node;
    }
    
public:
    Trie() {
        root = new TrieNode();
    }
    
    void insert(string word) {
        TrieNode *node = root ;
        
        for(int i =0; i<word.length();i++){
            char ch = word[i];
            
            if(!node->containsKey(ch)){
                node->put(ch, new TrieNode());
            }
            
            node = node->get(ch);
        }
        
        node->setEnd();
    }
    
    bool search(string word) {
        TrieNode *node = searchPrefix(word);
        
        return node!= NULL && node->isEnded();
    }
    
    bool startsWith(string prefix) {
        TrieNode* node = searchPrefix(prefix);
        
        return node!= NULL;
    }
};

/**
 * Your Trie object will be instantiated and called as such:
 * Trie* obj = new Trie();
 * obj->insert(word);
 * bool param_2 = obj->search(word);
 * bool param_3 = obj->startsWith(prefix);
 */