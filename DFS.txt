  vector<vector<int>> adj(n);
        vector<int> count(n,1) , result(n);
        elm = n;
        for(int i=0; i<edges.size();i++){
            adj[ edges[i][0] ].push_back( edges[i][1] );
            adj[ edges[i][1] ].push_back( edges[i][0] );
        }

        countAndCalulateDfs(0,-1,count, result,adj);
        reCalculateResult(0,-1 ,count, result,adj);
        return result;
    }
    void countAndCalulateDfs(int node , int parent , vector<int> & count, vector<int> & result ,vector<vector<int>> & adj ){
        for(int child : adj[node]){
            if(child != parent){
                countAndCalulateDfs(child, node ,count, result,adj);
                count[node ] += count[child];
                result[node] += result[child ] + count[child] ;
            }
        }
    }