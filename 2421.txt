class UnionFind{
    private:
    vector<int>parent, rank;
    public:
    UnionFind(int size){
        parent.resize(size);
        rank.resize(size,0);
        for(int i = 0 ;i<size;i++){
            parent[i]=i;
        }
    }

    int find(int x){
        if(parent[x] != x) return parent[x]= find(parent[x]);
        return parent[x];
    }

    void unify_sets(int x, int y){
        int xSet = find(x);
        int ySet = find(y);

        if(xSet == ySet) return ;

        if(rank[xSet] < rank[ySet]){
            parent[xSet] = ySet;
        }
        else if(rank[ySet] < rank[xSet]){
            parent[ySet] = xSet;
        }
        else{
            parent[ySet] = xSet;
            rank[xSet]++;
        }
    }
};
class Solution {
public:
    int numberOfGoodPaths(vector<int>& vals, vector<vector<int>>& edges) {
        int n = vals.size();
        vector<vector<int>> adj(n);
        for (auto& edge : edges) {
            adj[edge[0]].push_back(edge[1]);
            adj[edge[1]].push_back(edge[0]);
        }
        map<int, vector<int>> valuesToNodes;
        for (int node = 0; node < n; node++) {
            valuesToNodes[vals[node]].push_back(node);
        }

        UnionFind dsu(n);
        int goodPaths = 0;

        for (auto& [value, nodes] : valuesToNodes) {
            for (int node : nodes) {
                for (int neighbor : adj[node]) {
                    if (vals[node] >= vals[neighbor]) {
                        dsu.unify_sets(node, neighbor);
                    }
                }
            }
            unordered_map<int, int> group;
            // Iterate over all the nodes. Get the set of each node and increase the count of the
            // set by 1.
            for (int u : nodes) {
                group[dsu.find(u)]++; 
                // this checks if nodes with current value are in the same components
            }
            for (auto& [_, size] : group) {
                goodPaths += (size * (size + 1) / 2);
            }
        }
        return goodPaths;



    }
};

//solution read